class Stack:	def __init__(self):		self.items_a = []		self.items_b = []		self.items_c = []		def push(self, item):		if item == '(':			self.items_a.append(item)		elif item == '{':			self.items_b.append(item)		elif item == '[':			self.items_c.append(item)	def pop(self, item):		if item == ')':			return self.items_a.pop()		elif item == '}':			return self.items_b.pop()		elif item == ']':			return self.items_c.pop()		def is_a_empty(self):		return len(self.items_a) == 0		def is_b_empty(self):		return len(self.items_b) == 0		def is_c_empty(self):		return len(self.items_c) == 0		def is_correct_bracket_seq(row):	if row == '':		return True	stack = Stack()	for item in row:		if item in '({[':			stack.push(item)					elif item == ')':			if len(stack.items_a) == 0:				return False			stack.pop(item)		elif item == '}':			if len(stack.items_b) == 0:				return False			stack.pop(item)		elif item == ']':			if len(stack.items_c) == 0:				return False			stack.pop(item)		if stack.is_a_empty() and stack.is_b_empty() and stack.is_c_empty():		return True	return False		def main():	with open('input.txt', 'r') as f:		row = f.readline().rstrip()		res = is_correct_bracket_seq(row)		with open('output.txt', 'w') as f:		if res:			f.write('True')		else:			f.write('False')	if __name__ == '__main__':	main()