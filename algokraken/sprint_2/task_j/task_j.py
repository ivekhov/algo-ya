class Node:	def __init__(self, value):		self.value = value		self.next = Noneclass Queue:	def __init__(self):		self.head = None		self.__size = 0		self.curr_node = None	def put(self, value):		node = Node(value)		if self.__size == 0:			self.head = node			self.curr_node = node			self.curr_node.next = None		self.curr_node.next = node		self.curr_node = node		self.curr_node.next = None		self.__size += 1	def get(self):		if self.size != 0:						next_node = self.head.next						prev_node, curr_node = self.head, self.head.next			self.head = curr_node			curr_node = next_node						self.__size -= 1			return prev_node.value	def size(self):		return self.__size	def is_empty(self):		return self.__size == 0		def print_self(self):		curr_node = self.head		while curr_node:			print(curr_node.value, end='->')			curr_node = curr_node.nextdef main():	with open('input.txt', 'r') as f:		cnt = int(f.readline().rstrip())		queue = Queue()		with open('output.txt', 'w') as out:			for _ in range(cnt):				row = f.readline().rstrip()				items = row.split(' ')								if items[0] == 'put':					queue.put(int(items[1]))								elif items[0] == 'get':					if queue.is_empty():						out.write('error\n')					else:						res = queue.get()						out.write(f'{str(res)}\n')								elif items[0] == 'size':					res = queue.size()					out.write(f'{str(res)}\n')if __name__ == '__main__':	main()		'''queue = Queue()queue.put(34)queue.print_self()queue.put(25)queue.put(-6)queue.size()queue.is_empty()queue.head.valuequeue.get()'''