'''Успешная посылка: 140827389https://contest.yandex.ru/contest/22781/run-report/140827389/Задача: https://contest.yandex.ru/contest/22781/problems/B/==ПРИНЦИП РАБОТЫ==Идея решения подробно дана в условии задачи. Решение сводится к реализациистека для хранения входных данных. Стек реализуется в базовом варианте, как он описан в теории спринта. Обработка входных значений, вставка и извелечение элементов стека производитсяв основной функции, логика работы с данными перенесена в нее, а не в методыстека для сохранения чистоты функции (методов класса).В случае операнда, элемент добавляется на стек до тех пор, пока из строки не поступит оператор.Возможно, задача м б реализована с помощью рекурсии. ==ВРЕМЕННАЯ СЛОЖНОСТЬ==Количество операций в программе, не включая считывание и вывод результата, определяется числом операторов во входном массиве символов. В простейшем случае, 2 операнда и 1 оператор формируют сложность О(1).3 операнда и 2 оператор - сложность О(2)Возможно, в худшем случае (n / 2) - 1, гдеn - кол-во всех символов (операнды и операторы)n / 2  - 1, - когда операторов на 1 меньше, чем операндовКол-во действий не может быть равно n (длине входного массива символов), и всегда меньше, чем n, так в массиве присутствуют как операнды, так и операторы.==ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ==Длина стека в худшем случае n-1, где - n - кол-во операндов, - 1 - как минимум один оператор, так как оператор не помещается на стекВ базовом случае максимальная длина стека 2, так как в основном случае предполагается, что операция производится всегда над двумя операндами.-- Вводная из условии задачи на Контесте: Для вычисления значения выражения, записанного в обратной польской нотации, нужно считывать выражение слева направо и придерживаться следующих шагов:1 Обработка входного символа:- Если на вход подан операнд, он помещается на вершину стека.- Если на вход подан знак операции, то эта операция выполняется над требуемым количеством значений, взятых из стека в порядке добавления. Результат выполненной операции помещается на вершину стека.2 Если входной набор символов обработан не полностью, перейти к шагу 1.3 После полной обработки входного набора символов результат вычисления выражения находится в вершине стека. Если в стеке осталось несколько чисел, то надо вывести только верхний элемент.'''class Stack:	def __init__(self):		self.items = []	def push(self, value):		self.items.append(value)	def pop(self):		return self.items.pop()	def peek(self):		return self.items[-1]def main():	with open('input.txt', 'r') as f:		row = f.readline().rstrip()	symbols = row.split(' ')	stack = Stack()	for sym in symbols:		if sym.isdigit():			stack.push(int(sym))		elif len(sym) > 1 and sym[0] == '-':			sym = int(sym[1:]) * -1			stack.push(sym)		elif sym in '+-/*':			if sym == '+':				temp = stack.pop() + stack.pop()				stack.push(temp)			elif sym == '-':				b = stack.pop()				a = stack.pop()				temp = a - b				stack.push(temp)			elif sym == '*':				temp = stack.pop() * stack.pop()				stack.push(temp)			elif sym == '/':				b = stack.pop()				a = stack.pop()				temp = a // b				stack.push(temp)	res = stack.peek()	with open('output.txt', 'w') as out:		out.write(str(res))if __name__ == '__main__':	main()